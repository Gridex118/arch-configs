(defpoll root-used :interval "30s" `df -h | grep sda10 | awk '{print $3}'`)
(defpoll root-used-perc :interval "30s" `df -h | grep sda10 | awk '{print $5}'`)
(defpoll uptime :interval "1m" `uptime --pretty`)

(defwidget uptime []
  (box :class "rounded-box"
       :space-evenly false
       :orientation "horizontal"
       (label :text {uptime}
              :class "date-label")))

(defwidget disk []
  (box :class "rounded-box"
       :space-evenly false
       :orientation "horizontal"
       (label :text "Root:"
              :class "date-label"
              :style "color: #50fefc;")
       (label :text "${root-used}iB / ${root-used-perc} Used"
              :class "date-label")))

(defwidget time []
  (box :class "rounded-box"
       :space-evenly false
       :orientation "vertical"
       (box :space-evenly false
            :style "padding: .7rem; margin: .3rem;"
            :halign "center"
            :orientation "horizontal"
            (label :text "${clock-hours}:" :class "time-label")
            (label :text clock-mins :class "time-label" :style "color: #50fefc"))
       (label :text "${clock-day}/${clock-month} - ${clock-weekday}" 
              :class "date-label")))

(defwidget ram []
  (box :class "rounded-box"
       :space-evenly false
       :orientation "vertical"
       (radialmeter :value "${EWW_RAM.used_mem_perc}"
                    :text ""
                    :tooltip "RAM: ${EWW_RAM.used_mem_perc}%")))

(defwidget cpu []
  (box :class "rounded-box"
       :space-evenly false
       :orientation "vertical"
       (radialmeter :value "${EWW_CPU.avg}"
                    :text ""
                    :tooltip "CPU: ${EWW_CPU.avg}%")))

(defwidget wifi []
  (box :class "rounded-box"
       :space-evenly false
       :orientation "v"
       :vexpand false
       :hexpand false
       (box :space-evenly false
            :orientation "vertical"
            (label :text wifi-icon :style "font-size: 5.4em;")
            (label :text wifi-text)
            (label :text wifi-name :limit-width 14 :style "color: #50fefc;"))))

(deflisten workspaces :initial "[]" "bash ~/.config/eww/scripts/get-workspaces.sh")
(deflisten current_workspace :initial "1" "bash ~/.config/eww/scripts/get-active-workspace.sh")
(defwidget workspaces []
  (eventbox
    :onscroll "bash ~/.config/eww/scripts/change-active-workspace.sh {} ${current_workspace}"
    :class "workspaces-widget"
    (box :space-evenly true
         (label :text "${workspaces}${current_workspace}" :visible false)
                (for workspace in workspaces
                  (eventbox
                    :onclick "hyprctl dispatch workspace ${workspace.id}"
                    (box
                      :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
                      (label :text "${workspace.id}")))))))


(defwidget resource-panel []
  (box :class "resource-panel"
       :orientation "vertical"
       :halign "center"
       :space-evenly true
       (box :orientation "vertical"
            :space-evenly false
            (box :orientation "horizontal"
                 :space-evenly false
                 (uptime))
            (box :orientation "horizontal"
                 :space-evenly false
                 (workspaces))
            (box :orientation "horizontal"
                 :space-evenly false
                 (disk))
            (box :orientation "horizontal"
                 :space-evenly true
                 (time))
            (box :orientation "horizontal"
                 :space-evenly true
                 (cpu)
                 (ram))
            (box :orientation "h"
                 :space-evenly true
                 (wifi)))))

(defwindow resources
  :monitor 0
  :stacking "bg"
  :windowtype "normal"
  :wm-ignore false
  :geometry (geometry :x "10"
                      :y "6%"
                      :width "25%"
                      :height "44%"
                      :anchor "bottom right")
  (resource-panel))
